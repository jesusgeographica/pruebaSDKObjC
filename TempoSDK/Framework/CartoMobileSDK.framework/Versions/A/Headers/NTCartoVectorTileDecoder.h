/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTBinaryData.h"
#import "NTStringVector.h"
#import "NTStringMap.h"
#import "NTColor.h"
#import "NTCartoCSSStyleSet.h"
#import "NTVectorTileDecoder.h"
@class NTStringCartoCSSStyleSetMap;

/**
 * Decoder for Carto vector tiles in MapBox format.
 */
__attribute__ ((visibility("default"))) @interface NTCartoVectorTileDecoder : NTVectorTileDecoder
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTCartoVectorTileDecoder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a decoder for Carto vector tiles based on specified CartoCSS style set.<br>
 * @param layerIds The list of layer ids.<br>
 * @param layerStyleSets The CartoCSS style sets for the layers.<br>
 * @throws NSException If the decoder could not be created or there are issues with the style set.
 */
-(id)initWithLayerIds: (NTStringVector*)layerIds layerStyleSets: (NTStringCartoCSSStyleSetMap*)layerStyleSets;
/**
 * Returns the list of layer ids used when decoding a tile.<br>
 * @return The list of layer ids used.
 */
-(NTStringVector*)getLayerIds;
/**
 * Returns the visibility of the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @return True if the layer is visible, false otherwise.
 */
-(BOOL)isLayerVisible: (NSString*)layerId;
/**
 * Sets the visibility of the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @param visible True if the layer should be visible, false if hidden.
 */
-(void)setLayerVisible: (NSString*)layerId visible: (BOOL)visible;
/**
 * Returns the CartoCSS style set used by the decoder for the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @return The given layer CartoCSS style.<br>
 * @throws NSException If the layer id is not valid.
 */
-(NTCartoCSSStyleSet*)getLayerStyleSet: (NSString*)layerId;
/**
 * Sets the CartoCSS style set used by the decoder for the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @param styleSet The new style set to use.<br>
 * @throws NSException If the decoder could not be updated or there are issues with the CartoCSS.<br>
 * @throws NSException If the layer id is not valid.
 */
-(void)setLayerStyleSet: (NSString*)layerId styleSet: (NTCartoCSSStyleSet*)styleSet;
-(int)getMinZoom;
-(int)getMaxZoom;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

