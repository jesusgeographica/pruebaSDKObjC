/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTBinaryData.h"
#import "NTStringVector.h"
#import "NTColor.h"
#import "NTCompiledStyleSet.h"
#import "NTCartoCSSStyleSet.h"
#import "NTVectorTileDecoder.h"

/**
 * Decoder for vector tiles in MapBox format.
 */
__attribute__ ((visibility("default"))) @interface NTMBVectorTileDecoder : NTVectorTileDecoder
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTMBVectorTileDecoder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a decoder for MapBox vector tiles based on specified compiled style set.<br>
 * @param compiledStyleSet The compiled style set for the tiles.<br>
 * @throws NSException If the decoder could not be created or there are issues with the style set.
 */
-(id)initWithCompiledStyleSet: (NTCompiledStyleSet*)compiledStyleSet;
/**
 * Constructs a decoder for MapBox vector tiles based on specified CartoCSS style set.<br>
 * @param cartoCSSStyleSet The CartoCSS style set for the tiles.<br>
 * @throws NSException If the decoder could not be created or there are issues with the style set.
 */
-(id)initWithCartoCSSStyleSet: (NTCartoCSSStyleSet*)cartoCSSStyleSet;
/**
 * Returns the current compiled style set used by the decoder.<br>
 * If decoder uses non-compiled style set, null is returned.<br>
 * @return The current style set.
 */
-(NTCompiledStyleSet*)getCompiledStyleSet;
/**
 * Sets the current compiled style set used by the decoder.<br>
 * @param styleSet The new style set to use.<br>
 * @throws NSException If the decoder could not be updated or there are issues with the style set.
 */
-(void)setCompiledStyleSet: (NTCompiledStyleSet*)styleSet;
/**
 * Returns the current CartoCSS style set used by the decoder.<br>
 * If decoder uses non-CartoCSS style set, null is returned.<br>
 * @return The current style set.
 */
-(NTCartoCSSStyleSet*)getCartoCSSStyleSet;
/**
 * Sets the current CartoCSS style set used by the decoder.<br>
 * @param styleSet The new style set to use.<br>
 * @throws NSException If the decoder could not be updated or there are issues with the style set.
 */
-(void)setCartoCSSStyleSet: (NTCartoCSSStyleSet*)styleSet;
/**
 * Returns the list of all available style parameters.<br>
 * @return The list of all available style parameters.
 */
-(NTStringVector*)getStyleParameters;
/**
 * Returns the value of the specified style parameter.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to return.<br>
 * @return The value of the parameter. If parameter does not exists, empty string is returned.<br>
 * @throws NSException If the style parameter does not exist.
 */
-(NSString*)getStyleParameter: (NSString*)param;
/**
 * Sets the value of the specified parameter.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.<br>
 * @return True if the parameter was set. False if the style parameter does not exist or could not be set.
 */
-(BOOL)setStyleParameter: (NSString*)param value: (NSString*)value;
-(int)getMinZoom;
-(int)getMaxZoom;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

