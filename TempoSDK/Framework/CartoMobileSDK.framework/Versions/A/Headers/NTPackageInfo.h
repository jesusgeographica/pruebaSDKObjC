/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Package types.
 */
typedef NS_ENUM(NSInteger, NTPackageType) {
/**
 * Map package.
 */
  NT_PACKAGE_TYPE_MAP = 0,
/**
 * Routing package.
 */
  NT_PACKAGE_TYPE_ROUTING = 1,
/**
 * Geocoding package.
 */
  NT_PACKAGE_TYPE_GEOCODING = 2,
/**
 * Valhalla routing package.
 */
  NT_PACKAGE_TYPE_VALHALLA_ROUTING = 3
};


#import "NTPackageMetaInfo.h"
#import "NTPackageTileMask.h"
#import "NTStringVector.h"

/**
 * Information about map package. This includes id, type, version, name, description and size.
 */
__attribute__ ((visibility("default"))) @interface NTPackageInfo : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new package info instance.<br>
 * @param packageId The unique id of the package<br>
 * @param packageType The type of the package<br>
 * @param version The increasing version number of the package<br>
 * @param size Size of the package in bytes<br>
 * @param serverURL Location of the package<br>
 * @param tileMask The tile mask of the package<br>
 * @param metaInfo Package meta info
 */
-(id)initWithPackageId: (NSString*)packageId packageType: (enum NTPackageType)packageType version: (int)version size: (unsigned long long)size serverURL: (NSString*)serverURL tileMask: (NTPackageTileMask*)tileMask metaInfo: (NTPackageMetaInfo*)metaInfo;
/**
 * Returns the internal package id. This should not be displayed to the user.<br>
 * @return The unique package id
 */
-(NSString*)getPackageId;
/**
 * Returns the package type.<br>
 * @return The package type (map, routing, etc)
 */
-(enum NTPackageType)getPackageType;
/**
 * Returns the package version. This should not be displayed to the user.<br>
 * @return The increasing package version number
 */
-(int)getVersion;
/**
 * Returns the default name (short description) of the package. It is better to use getNames method instead, as each package may contain multiple names.<br>
 * The name returned is generic name or if that is not available, then English name.<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
-(NSString*)getName;
/**
 * Returns the names (short description) of the package. This can be displayed to the user. Each package may have multiple names, if the package has multiple classifications.<br>
 * Note: this information is dervied from package meta info, "name_XXX" fields.<br>
 * @param lang The language for the name<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
-(NTStringVector*)getNames: (NSString*)lang;
/**
 * Returns the size of the package in bytes. This can be displayed to the user.<br>
 * @return The size of the package in bytes
 */
-(unsigned long long)getSize;
/**
 * Returns the encoded tile mask of the package. This is available for map packages but not for routing packages.<br>
 * This should not be displayed to the user.<br>
 * @return The tile mask of the package
 */
-(NTPackageTileMask*)getTileMask;
/**
 * Returns package meta info. If package contains no meta info, null is returned.<br>
 * @return The package meta info.
 */
-(NTPackageMetaInfo*)getMetaInfo;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#import "NTPackageMetaInfo.h"
#import "NTPackageTileMask.h"
#import "NTStringVector.h"

__attribute__ ((visibility("default"))) @interface NTPackageInfoVector : NSObject
{
	/** @internal:nodoc: */
	void *swigCPtr;
	/** @internal:nodoc: */
	BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
-(id)init;
-(unsigned int)size;
-(unsigned int)capacity;
-(void)reserve: (unsigned int)n;
-(BOOL)isEmpty;
-(void)clear;
-(void)add: (NTPackageInfo*)x;
-(NTPackageInfo*)get: (int)i;
-(void)set: (int)i val: (NTPackageInfo*)val;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

