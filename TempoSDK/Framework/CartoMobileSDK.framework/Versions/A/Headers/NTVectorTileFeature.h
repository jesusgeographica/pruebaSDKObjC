/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapTile.h"
#import "NTVariant.h"
#import "NTFeature.h"

/**
 * A vector tile feature consisting of id, layer, geometry and properties.
 */
__attribute__ ((visibility("default"))) @interface NTVectorTileFeature : NTFeature
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTVectorTileFeature*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;


/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a VectorTileFeature object from id, layer name, geometry and properties.<br>
 * @param id The id of the feature.<br>
 * @param mapTile The map tile of this feature<br>
 * @param layerName The name of the layer of the feature.<br>
 * @param geometry The geometry of the feature.<br>
 * @param properties The properties of the feature.
 */
-(id)initWithArg0: (long long)arg0 mapTile: (NTMapTile*)mapTile layerName: (NSString*)layerName geometry: (NTGeometry*)geometry properties: (NTVariant*)properties;
/**
 * Returns the id of the feature.<br>
 * @return The id of the feature.
 */
-(long long)getId;
/**
 * Returns the map tile of the feature.<br>
 * @return The map tile of the feature.
 */
-(NTMapTile*)getMapTile;
/**
 * Returns the layer name of the feature.<br>
 * @return The layer name of the feature.
 */
-(NSString*)getLayerName;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#import "NTMapTile.h"
#import "NTVariant.h"
#import "NTFeature.h"

__attribute__ ((visibility("default"))) @interface NTVectorTileFeatureVector : NSObject
{
	/** @internal:nodoc: */
	void *swigCPtr;
	/** @internal:nodoc: */
	BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
-(id)init;
-(unsigned int)size;
-(unsigned int)capacity;
-(void)reserve: (unsigned int)n;
-(BOOL)isEmpty;
-(void)clear;
-(void)add: (NTVectorTileFeature*)x;
-(NTVectorTileFeature*)get: (int)i;
-(void)set: (int)i val: (NTVectorTileFeature*)val;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

