/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Possible cluster builder modes.
 */
typedef NS_ENUM(NSInteger, NTClusterBuilderMode) {
/**
 * Cluster builder receives full list of elements in the cluster. This mode is more expensive compared to the light mode.
 */
  NT_CLUSTER_BUILDER_MODE_ELEMENTS,
/**
 * Cluster builder receives element count in the cluster. This mode is less expensive compared to the full mode.
 */
  NT_CLUSTER_BUILDER_MODE_ELEMENT_COUNT
};


#import "NTMapPos.h"
#import "NTVectorElement.h"
@class NTVectorElementVector;

/**
 * A special callback interface for building cluster elements from set of existing vector element.
 */
__attribute__ ((visibility("default"))) @interface NTClusterElementBuilder : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTClusterElementBuilder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Returns the builder mode. The return value of this method determines which builder method is called.<br>
 * @return The builder mode that determines which buildClusterElement method is called.
 */
-(enum NTClusterBuilderMode)getBuilderMode;
/**
 * Returns the builder mode. The return value of this method determines which builder method is called.<br>
 * @return The builder mode that determines which buildClusterElement method is called.
 */
-(enum NTClusterBuilderMode)getBuilderModeSwigExplicitNTClusterElementBuilder;
/**
 * A callback for building a new cluster element given position and the number of cluster element.<br>
 * @param mapPos The position of the cluster element.<br>
 * @param elementCount The number of elements in the cluster.<br>
 * @return The created cluster element.
 */
-(NTVectorElement*)buildClusterElement: (NTMapPos*)mapPos elementCount: (int)elementCount;
/**
 * A callback for building a new cluster element given position and the number of cluster element.<br>
 * @param mapPos The position of the cluster element.<br>
 * @param elementCount The number of elements in the cluster.<br>
 * @return The created cluster element.
 */
-(NTVectorElement*)buildClusterElementSwigExplicitNTClusterElementBuilder: (NTMapPos*)mapPos elementCount: (int)elementCount;
/**
 * A callback for building a new cluster element given position and list of vector elements.<br>
 * @param mapPos The position of the cluster element.<br>
 * @param elements The list of elements that defines the cluster.<br>
 * @return The created cluster element.
 */
-(NTVectorElement*)buildClusterElement: (NTMapPos*)mapPos elements: (NTVectorElementVector*)elements;
/**
 * A callback for building a new cluster element given position and list of vector elements.<br>
 * @param mapPos The position of the cluster element.<br>
 * @param elements The list of elements that defines the cluster.<br>
 * @return The created cluster element.
 */
-(NTVectorElement*)buildClusterElementSwigExplicitNTClusterElementBuilder: (NTMapPos*)mapPos elements: (NTVectorElementVector*)elements;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;
-(id)init;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

