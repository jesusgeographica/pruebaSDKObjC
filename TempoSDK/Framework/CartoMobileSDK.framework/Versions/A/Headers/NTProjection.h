/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapBounds.h"
#import "NTMapPos.h"

/**
 * An abstract base class for all projections.
 */
__attribute__ ((visibility("default"))) @interface NTProjection : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTProjection*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;


/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Returns the bounds of this projection.<br>
 * @return The bounds of this projection.
 */
-(NTMapBounds*)getBounds;
/**
 * Returns local scale for the specified position.<br>
 * @param pos The position in the internal coordinate system.<br>
 * @return The local scale for the specified position.
 */
-(double)getLocalScale: (NTMapPos*)pos;
/**
 * Converts internal size to meters at the equator.<br>
 * @param size The size in the internal coordinate system.<br>
 * @return The approximate size in meters at the equator.
 */
-(double)fromInternalScale: (double)size;
/**
 * Transforms a position from the WGS84 coordinate system to the coordinate system of this projection.<br>
 * @param pos The position in the WGS84 coordinate system. It should be encoded as longitude-latitude.<br>
 * @return The transformed position in the coordinate system of this projection.
 */
-(NTMapPos*)fromWgs84: (NTMapPos*)pos;
/**
 * Transforms a position from the coordinate system of this projection to the WGS84 coordinate system.<br>
 * @param pos The position in the coordinate system of this projection.<br>
 * @return The transformed position in the WGS84 coordinate system. It is given as longitude-latitude.
 */
-(NTMapPos*)toWgs84: (NTMapPos*)pos;
/**
 * Transforms a position given using latitutde-longitude coordinates from the WGS84 coordinate system to the coordinate system of this projection.<br>
 * @param lat The latitude in the WGS84 coordinate system. It should be in range -90..90.<br>
 * @param lng The longitude in the WGS84 coordinate system. It should be in range -180..180.<br>
 * @return The transformed position in the coordinate system of this projection.
 */
-(NTMapPos*)fromLat: (double)lat lng: (double)lng;
/**
 * Transforms a position from the coordinate system of this projection to the WGS84 coordinate system latitude-longitute coordinates.<br>
 * @param x The x position in the coordinate system of this projection.<br>
 * @param y The y position in the coordinate system of this projection.<br>
 * @return The transformed position in the WGS84 coordinate system given as latitude-longitude.
 */
-(NTMapPos*)toLatLong: (double)x y: (double)y;
/**
 * Return name of this projection in Well-Known format. For example, as "EPSG:3857"<br>
 * @return The name of this projection.
 */
-(NSString*)getName;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

