/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTCartoVisBuilder.h"
#import "NTBaseMapView.h"
#import "NTAssetPackage.h"

/**
 * A high level interface for loading VisJSON configurations.<br>
 * VisJSON defines full map visualizations, together with<br>
 * base maps and interactive overlays.<br>
 * Caution! The class is highly EXPERIMENTAL and only works with limited<br>
 * number of v2 visualizations and with even fewer v3 visualizations!
 */
__attribute__ ((visibility("default"))) @interface NTCartoVisLoader : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new instance of CartoVisLoader with default settings.
 */
-(id)init;
/**
 * Returns true if the service configures layers as vector tile layers,<br>
 * when possible. By default this is false. Vector layers<br>
 * provide much better visual quality at the expense of performance.<br>
 * @return True if vector layers should be used. False is raster layers are used.
 */
-(BOOL)isDefaultVectorLayerMode;
/**
 * Sets the service to vector layer mode or raster layer mode.<br>
 * By default service creates raster layers, but vector layers may<br>
 * provide much better visual quality at the expense of performance.<br>
 * @param vectorLayerMode True if vector layers should be used. False is raster layers are used.
 */
-(void)setDefaultVectorLayerMode: (BOOL)vectorLayerMode;
/**
 * Returns true if 'strict mode' is enabled (the service throws exceptions whenever an error is encountered).<br>
 * @return True if 'strict mode' is enabled.
 */
-(BOOL)isStrictMode;
/**
 * Sets the 'strict mode' flag.<br>
 * @param strictMode True if all errors result in exceptions. The default is false.
 */
-(void)setStrictMode: (BOOL)strictMode;
/**
 * Returns the asset package used when decoding vector tiles.<br>
 * By default, no asset package is used and null is returned.<br>
 * @return The asset package used when decoding vector tiles.
 */
-(NTAssetPackage*)getVectorTileAssetPackage;
/**
 * Sets the asset package used when decoding vector tiles.<br>
 * Asset package with fonts is needed when texts are used.<br>
 * @param assetPackage The asset package to use for vector tiles.
 */
-(void)setVectorTileAssetPackage: (NTAssetPackage*)assetPackage;
/**
 * Loads a specified online VisJSON configuration.<br>
 * The actual map configuration must be done via callbacks in<br>
 * the specified CartoVisBuilder instance.<br>
 * @param builder The handler that receives events for configuring the map.<br>
 * @param visURL The VisJSON URL to use.<br>
 * @throws NSException If IO error occured during the operation.
 */
-(void)loadVis: (NTCartoVisBuilder*)builder visURL: (NSString*)visURL;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

