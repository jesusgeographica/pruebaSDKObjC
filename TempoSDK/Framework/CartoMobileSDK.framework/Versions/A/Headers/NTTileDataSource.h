/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapTile.h"
#import "NTMapBounds.h"
#import "NTStringMap.h"
#import "NTTileData.h"
#import "NTProjection.h"

/**
 * Abstract base class for tile data sources. It provides default implementation <br>
 * for listener registration and other common tile data source methods.
 */
__attribute__ ((visibility("default"))) @interface NTTileDataSource : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTTileDataSource*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Returns the minimum zoom level supported by this data source.<br>
 * @return The minimum zoom level supported (inclusive).
 */
-(int)getMinZoom;
/**
 * Returns the minimum zoom level supported by this data source.<br>
 * @return The minimum zoom level supported (inclusive).
 */
-(int)getMinZoomSwigExplicitNTTileDataSource;
/**
 * Returns the maximum zoom level supported by this data source.<br>
 * @return The maximum zoom level supported (exclusive).
 */
-(int)getMaxZoom;
/**
 * Returns the maximum zoom level supported by this data source.<br>
 * @return The maximum zoom level supported (exclusive).
 */
-(int)getMaxZoomSwigExplicitNTTileDataSource;
/**
 * Returns the extent of the tiles in this data source.<br>
 * The bounds are in coordinate system of the projection of the data source.<br>
 * @return The extent of the data source.
 */
-(NTMapBounds*)getDataExtent;
/**
 * Returns the extent of the tiles in this data source.<br>
 * The bounds are in coordinate system of the projection of the data source.<br>
 * @return The extent of the data source.
 */
-(NTMapBounds*)getDataExtentSwigExplicitNTTileDataSource;
/**
 * Returns the projection of this tile source.<br>
 * @return The projection of this tile source.
 */
-(NTProjection*)getProjection;
/**
 * Loads the specified tile.<br>
 * Note: the tile coordinate system used here is vertically flipped relative to layer tile coordinate system.<br>
 * @param tile The tile to load.<br>
 * @return The tile data. If the tile is not available, null may be returned.
 */
-(NTTileData*)loadTile: (NTMapTile*)tile;
/**
 * Notifies listeners that the tiles have changed. Action taken depends on the implementation of the<br>
 * listeners, but generally all cached tiles will be reloaded. If the removeTiles flag is set all caches will be cleared<br>
 * prior to reloading, if it's not set then the reloaded tiles will replace the old tiles in caches as they finish loading.<br>
 * @param removeTiles The remove tiles flag.
 */
-(void)notifyTilesChanged: (BOOL)removeTiles;
/**
 * Notifies listeners that the tiles have changed. Action taken depends on the implementation of the<br>
 * listeners, but generally all cached tiles will be reloaded. If the removeTiles flag is set all caches will be cleared<br>
 * prior to reloading, if it's not set then the reloaded tiles will replace the old tiles in caches as they finish loading.<br>
 * @param removeTiles The remove tiles flag.
 */
-(void)notifyTilesChangedSwigExplicitNTTileDataSource: (BOOL)removeTiles;
/**
 * Constructs an abstract TileDataSource object.<br>
 * Note: EPSG3857 projection is used. minZoom is defined to be 0, maxZoom is defined to be 24.
 */
-(id)init;
/**
 * Constructs an abstract TileDataSource object.<br>
 * Note: EPSG3857 projection is used.<br>
 * @param minZoom The minimum zoom level supported by this data source.<br>
 * @param maxZoom The maximum zoom level supported by this data source.
 */
-(id)initWithMinZoom: (int)minZoom maxZoom: (int)maxZoom;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

