/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapPos.h"
#import "NTMapBounds.h"
#import "NTVariant.h"
#import "NTLayer.h"

/**
 * A callback interface for handling VisJSON directives.<br>
 * The callback can be used to change the default VisJSON behaviour<br>
 * by ignoring or modifying configured layers or map center position,<br>
 * for example.
 */
__attribute__ ((visibility("default"))) @interface NTCartoVisBuilder : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTCartoVisBuilder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Called when the map should be centered at given position.<br>
 * @param mapPos The center position in WGS84 coordinates (longitude-latitude).
 */
-(void)setCenter: (NTMapPos*)mapPos;
/**
 * Called when the map should be centered at given position.<br>
 * @param mapPos The center position in WGS84 coordinates (longitude-latitude).
 */
-(void)setCenterSwigExplicitNTCartoVisBuilder: (NTMapPos*)mapPos;
/**
 * Called when the map should be zoomed to the specified level.<br>
 * @param zoom The zoom level.
 */
-(void)setZoom: (float)zoom;
/**
 * Called when the map should be zoomed to the specified level.<br>
 * @param zoom The zoom level.
 */
-(void)setZoomSwigExplicitNTCartoVisBuilder: (float)zoom;
/**
 * Called when the map should use the specified bounds.<br>
 * @param mapBounds The map bounds in WGS84 coordinates.
 */
-(void)setBounds: (NTMapBounds*)mapBounds;
/**
 * Called when the map should use the specified bounds.<br>
 * @param mapBounds The map bounds in WGS84 coordinates.
 */
-(void)setBoundsSwigExplicitNTCartoVisBuilder: (NTMapBounds*)mapBounds;
/**
 * Called when the map should be augmented with decription info.<br>
 * The description info does not have a formal structure and is<br>
 * basically a JSON value encoded as a Variant.<br>
 * @param descriptionInfo The description variant.
 */
-(void)setDescription: (NTVariant*)descriptionInfo;
/**
 * Called when the map should be augmented with decription info.<br>
 * The description info does not have a formal structure and is<br>
 * basically a JSON value encoded as a Variant.<br>
 * @param descriptionInfo The description variant.
 */
-(void)setDescriptionSwigExplicitNTCartoVisBuilder: (NTVariant*)descriptionInfo;
/**
 * Called when a layer should be added to the map.<br>
 * @param layer The layer to be added. <br>
 * @param attributes The additional layer attributes. For example, info window and layer legend are part of the attributes.
 */
-(void)addLayer: (NTLayer*)layer attributes: (NTVariant*)attributes;
/**
 * Called when a layer should be added to the map.<br>
 * @param layer The layer to be added. <br>
 * @param attributes The additional layer attributes. For example, info window and layer legend are part of the attributes.
 */
-(void)addLayerSwigExplicitNTCartoVisBuilder: (NTLayer*)layer attributes: (NTVariant*)attributes;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;
-(id)init;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

