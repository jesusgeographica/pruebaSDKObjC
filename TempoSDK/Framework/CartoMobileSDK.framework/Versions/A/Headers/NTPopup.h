/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapPos.h"
#import "NTScreenPos.h"
#import "NTBitmap.h"
#import "NTGeometry.h"
#import "NTPointGeometry.h"
#import "NTPopupStyle.h"
#import "NTBillboard.h"

/**
 * An abstract billboard element that can be displayed on the map. It<br>
 * always faces the camera and has a dynamically drawn bitmap.
 */
__attribute__ ((visibility("default"))) @interface NTPopup : NTBillboard
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTPopup*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Draws a custom bitmap for this Popup that will be used for drawing the Popup on the map.<br>
 * The method is called each time the Popup gets reloaded internally.<br>
 * @param anchorScreenPos The screen position of the anchor point of this popup in pixels.<br>
 * @param screenWidth The current screen width in pixels.<br>
 * @param screenHeight The current screen height in pixels.<br>
 * @param dpToPX The value used for converting display independent pixels (dp) to pixels (px).<br>
 * @return The custom Popup bitmap.
 */
-(NTBitmap*)drawBitmap: (NTScreenPos*)anchorScreenPos screenWidth: (float)screenWidth screenHeight: (float)screenHeight dpToPX: (float)dpToPX;
/**
 * Returns the horizontal anchor point of this popup.<br>
 * @return The horizontal anchor point of this popup.
 */
-(float)getAnchorPointX;
/**
 * Sets the horizontal anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * @param anchorPointX The new horizontal anchor point for the popup. -1 means the left side,<br>
 * 0 the center and 1 the right side of the popup. The default is 0.
 */
-(void)setAnchorPointX: (float)anchorPointX;
/**
 * Returns the vertical anchor point of this popup.<br>
 * @return The vertical anchor point of this popup.
 */
-(float)getAnchorPointY;
/**
 * Sets the vertical anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * @param anchorPointY The vertical anchor point for the popup. -1 means the bottom,<br>
 * 0 the center and 1 the top of the popup. The default is -1.
 */
-(void)setAnchorPointY: (float)anchorPointY;
/**
 * Sets the anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * Values will be clamped to [-1, 1] range.<br>
 * @param anchorPointX The new horizontal anchor point for the popup. -1 means the left side,<br>
 * 0 the center and 1 the right side of the popup. The default is 0.<br>
 * @param anchorPointY The vertical anchor point for the popup. -1 means the bottom,<br>
 * 0 the center and 1 the top of the popup. The default is -1.
 */
-(void)setAnchorPointX: (float)anchorPointX anchorPointY: (float)anchorPointY;
/**
 * Returns the style of this Popup.<br>
 * @return The style that defines what this Popup looks like.
 */
-(NTPopupStyle*)getStyle;
/**
 * Sets the style for this Popup.<br>
 * @param style The new style that defines what this popup looks like.
 */
-(void)setStyle: (NTPopupStyle*)style;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

