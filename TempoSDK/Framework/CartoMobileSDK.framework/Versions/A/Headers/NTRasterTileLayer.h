/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTTileDataSource.h"
#import "NTTileLayer.h"
#import "NTRasterTileEventListener.h"

/**
 * A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
 */
__attribute__ ((visibility("default"))) @interface NTRasterTileLayer : NTTileLayer
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTRasterTileLayer*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a RasterTileLayer object from a data source.<br>
 * @param dataSource The data source from which this layer loads data.
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource;
/**
 * Returns the tile texture cache capacity.<br>
 * @return The tile texture cache capacity in bytes.
 */
-(unsigned int)getTextureCacheCapacity;
/**
 * Sets the tile texture cache capacity. Texture cache is the primary storage for raster data,<br>
 * all tiles contained within the texture cache are stored as uncompressed openGL textures and can immediately be<br>
 * drawn to the screen. Setting the cache size too small may cause artifacts, such as disappearing tiles.<br>
 * The more tiles are visible on the screen, the larger this cache should be. A single opaque 256x256 tile takes<br>
 * up 192KB of memory, a transparent tile of the same size takes 256KB. The number of tiles on the screen depends<br>
 * on the screen size and density, current rotation and tilt angle, tile draw size parameter and <br>
 * whether or not preloading is enabled.<br>
 * The default is 10MB, which should be enough for most use cases with preloading enabled. If preloading is<br>
 * disabled, the cache size should be reduced by the user to conserve memory.<br>
 * @param capacityInBytes The new tile bitmap cache capacity in bytes.
 */
-(void)setTextureCacheCapacity: (unsigned int)capacityInBytes;
/**
 * Returns the raster tile event listener.<br>
 * @return The raster tile event listener.
 */
-(NTRasterTileEventListener*)getRasterTileEventListener;
/**
 * Sets the raster tile event listener.<br>
 * @param eventListener The raster tile event listener.
 */
-(void)setRasterTileEventListener: (NTRasterTileEventListener*)eventListener;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

