/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Possible styles in which line end points are drawn.
 */
typedef NS_ENUM(NSInteger, NTLineEndType) {
/**
 * No line end points are drawn.
 */
  NT_LINE_END_TYPE_NONE,
/**
 * Line end points are drawn as squares.
 */
  NT_LINE_END_TYPE_SQUARE,
/**
 * Line end points are drawn as half circles.
 */
  NT_LINE_END_TYPE_ROUND
};

/**
 * Possible styles in which line segments are connected with each other.
 */
typedef NS_ENUM(NSInteger, NTLineJoinType) {
/**
 * Line segments are not connected with each other. The fastest and ugliest.
 */
  NT_LINE_JOIN_TYPE_NONE,
/**
 * Line segments are connected with each other using miter connections. This is the preferred mode (fast and good looking generally).
 */
  NT_LINE_JOIN_TYPE_MITER,
/**
 * Line segments are connected with each other using bevel (straight line) connectors. Fast<br>
 * but results in an unnatural line.
 */
  NT_LINE_JOIN_TYPE_BEVEL,
/**
 * Line segments are connected with each other using circle sectors resulting in <br>
 * round corners. Slowest and prettiest.
 */
  NT_LINE_JOIN_TYPE_ROUND
};


#import "NTBitmap.h"
#import "NTColor.h"
#import "NTStyle.h"

/**
 * A style for lines. Contains attributes for configuring how the line is drawn on the screen.
 */
__attribute__ ((visibility("default"))) @interface NTLineStyle : NTStyle
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTLineStyle*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Returns the bitmap of the line.<br>
 * @return The bitmap of the line.
 */
-(NTBitmap*)getBitmap;
/**
 * Returns the width of the line used for click detection.<br>
 * @return The width of the line used for click detection.
 */
-(float)getClickWidth;
/**
 * Returns the end point type of the line.<br>
 * @return The end point type of the line.
 */
-(enum NTLineEndType)getLineEndType;
/**
 * Returns the join type of the line.<br>
 * @return The join type of the line.
 */
-(enum NTLineJoinType)getLineJoinType;
/**
 * Returns the stretching factor of the line.<br>
 * @return The stretching factor of the line.
 */
-(float)getStretchFactor;
/**
 * Returns the width of the line.<br>
 * @return The width of the line.
 */
-(float)getWidth;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

