/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Vector tile rendering order.
 */
typedef NS_ENUM(NSInteger, NTVectorTileRenderOrder) {
/**
 * No rendering, elements are hidden.
 */
  NT_VECTOR_TILE_RENDER_ORDER_HIDDEN = -1,
/**
 * Elements are rendered together with the same layer elements.<br>
 * Layers that are on top of the layers are rendered on top this layer.
 */
  NT_VECTOR_TILE_RENDER_ORDER_LAYER = 0,
/**
 * Elements are rendered on top of all normal layers.
 */
  NT_VECTOR_TILE_RENDER_ORDER_LAST = 1
};


#import "NTTileDataSource.h"
#import "NTTileData.h"
#import "NTTileLayer.h"
#import "NTVectorTileEventListener.h"
#import "NTVectorTileDecoder.h"

/**
 * A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
 */
__attribute__ ((visibility("default"))) @interface NTVectorTileLayer : NTTileLayer
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTVectorTileLayer*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a VectorTileLayer object from a data source and tile decoder.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param decoder The tile decoder that decoder loaded tiles and applies styles.
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource decoder: (NTVectorTileDecoder*)decoder;
/**
 * Returns the tile decoder assigned to this layer.<br>
 * @return The tile decoder assigned to this layer.
 */
-(NTVectorTileDecoder*)getTileDecoder;
/**
 * Returns the tile cache capacity.<br>
 * @return The tile cache capacity in bytes.
 */
-(unsigned int)getTileCacheCapacity;
/**
 * Sets the vector tile cache capacity. Tile cache is the primary storage for vector data,<br>
 * all tiles contained within the cache are stored as uncompressed vertex buffers and can immediately be<br>
 * drawn to the screen. Setting the cache size too small may cause artifacts, such as disappearing tiles.<br>
 * The more tiles are visible on the screen, the larger this cache should be. <br>
 * The default is 10MB, which should be enough for most use cases with preloading enabled. If preloading is<br>
 * disabled, the cache size should be reduced by the user to conserve memory.<br>
 * @param capacityInBytes The new tile bitmap cache capacity in bytes.
 */
-(void)setTileCacheCapacity: (unsigned int)capacityInBytes;
/**
 * Returns the current display order of the labels.<br>
 * @return The display order of the labels. Default is VECTOR_TILE_RENDER_ORDER_LAYER.
 */
-(enum NTVectorTileRenderOrder)getLabelRenderOrder;
/**
 * Sets the current display order of the labels.<br>
 * @param renderOrder The new display order of the labels.
 */
-(void)setLabelRenderOrder: (enum NTVectorTileRenderOrder)renderOrder;
/**
 * Returns the current display order of the buildings.<br>
 * @return The display order of the buildigns. Default is VECTOR_TILE_RENDER_ORDER_LAYER.
 */
-(enum NTVectorTileRenderOrder)getBuildingRenderOrder;
/**
 * Sets the current display order of the buildings.<br>
 * @param renderOrder The new display order of the labels.
 */
-(void)setBuildingRenderOrder: (enum NTVectorTileRenderOrder)renderOrder;
/**
 * Returns the vector tile event listener.<br>
 * @return The vector tile event listener.
 */
-(NTVectorTileEventListener*)getVectorTileEventListener;
/**
 * Sets the vector tile event listener.<br>
 * @param eventListener The vector tile event listener.
 */
-(void)setVectorTileEventListener: (NTVectorTileEventListener*)eventListener;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

