/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapTile.h"
#import "NTMapPos.h"
#import "NTMapBounds.h"
#import "NTScreenPos.h"
#import "NTStringMap.h"
#import "NTTileDataSource.h"
#import "NTTileData.h"
#import "NTProjection.h"
#import "NTBitmap.h"
@class NTMapPosVector;
@class NTScreenPosVector;
@class NTScreenPosVector;

/**
 * Tile data source that uses given bitmap with two, three or four control points define a raster overlay.<br>
 * Note: if two points are given, conformal transformation is calculated. If three points are given, affine transformation is calculated. In case of four points, perspective transformation is used.
 */
__attribute__ ((visibility("default"))) @interface NTBitmapOverlayRasterTileDataSource : NTTileDataSource
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTBitmapOverlayRasterTileDataSource*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a new bitmap overlay data source.<br>
 * @param minZoom The minimum zoom for generated tiles.<br>
 * @param maxZoom The maximum zoom for generated tiles.<br>
 * @param bitmap The bitmap to use as an overlay.<br>
 * @param projection The projection definining coordinate system of the control points.<br>
 * @param mapPoses The geographical control points. The list must contain either 2, 3 or 4 points.<br>
 * @param bitmapPoses The pixel coordinates in the bitmap corresponding to geographical control points. The number of coordinates must be equal to the number of control points in mapPoses list.<br>
 * @throws NSException If the transformation can not be calculated.
 */
-(id)initWithMinZoom: (int)minZoom maxZoom: (int)maxZoom bitmap: (NTBitmap*)bitmap projection: (NTProjection*)projection mapPoses: (NTMapPosVector*)mapPoses bitmapPoses: (NTScreenPosVector*)bitmapPoses;
-(NTMapBounds*)getDataExtent;
-(NTMapBounds*)getDataExtentSwigExplicitNTBitmapOverlayRasterTileDataSource;
-(NTTileData*)loadTile: (NTMapTile*)mapTile;
-(NTTileData*)loadTileSwigExplicitNTBitmapOverlayRasterTileDataSource: (NTMapTile*)mapTile;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

